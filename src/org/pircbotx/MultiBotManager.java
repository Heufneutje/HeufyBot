// Generated by delombok at Thu Oct 04 13:11:43 CEST 2012
/**
 * Copyright (C) 2010-2011 Leon Blakey <lord.quackstar at gmail.com>
 *
 * This file is part of PircBotX.
 *
 * PircBotX is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PircBotX is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PircBotX.  If not, see <http://www.gnu.org/licenses/>.
 */
package org.pircbotx;

import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.InetAddress;
import java.nio.charset.Charset;
import java.util.Collections;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.net.SocketFactory;
import org.pircbotx.exception.IrcException;
import org.pircbotx.exception.NickAlreadyInUseException;
import org.pircbotx.hooks.managers.ListenerManager;
/**
 * Manager that provides an easy way to create bots on many different servers
 * with the same or close to the same information. All important setup methods
 * have been mirrored here. For documentation, see their equivalent PircBotX
 * methods.
 * <p>
 * <b>Note:</b> Setting any value after connectAll() is invoked will NOT update
 * all existing bots. You will need to loop over the bots and call the set methods
 * manually
 * @author Leon Blakey <lord.quackstar at gmail.com>
 */

public class MultiBotManager {
	protected final Set<BotEntry> bots = new HashSet();
	protected final HeufyBot dummyBot;
	protected ListenerManager listenerManager;
	protected String name;
	protected boolean verbose;
	protected int socketTimeout;
	protected long messageDelay;
	protected String login;
	protected boolean autoNickChange;
	protected Charset encoding;
	protected InetAddress dcciNetAddress;
	protected List<Integer> dccports;
	/**
	 * Setup MultiBotManager with all bots being called the specified name
	 * @param name The name that all bots will have by default
	 */
	public MultiBotManager(final String name) {
		this(new HeufyBot(true){
			{
				setName(name);
			}
		});
	}
	/**
	 * Setup MultiBotManager by cloning ALL of the settings from the specified
	 * bot
	 * @param dummyBot The bot to clone the settings from
	 */
	public MultiBotManager(HeufyBot dummyBot) {
		//Mirror the values 
		this.dummyBot = dummyBot;
		name = dummyBot.getName();
		listenerManager = dummyBot.getListenerManager();
		verbose = dummyBot.isVerbose();
		socketTimeout = dummyBot.getSocketTimeout();
		messageDelay = dummyBot.getMessageDelay();
		login = dummyBot.getLogin();
		autoNickChange = dummyBot.isAutoNickChange();
		encoding = dummyBot.getEncoding();
		dcciNetAddress = dummyBot.getDccInetAddress();
		dccports = dummyBot.getDccPorts();
	}
	/**
	 * Create a bot using the specified hostname, 6667 for port, and no password or socketfactory
	 * @param hostname The hostname of the server to connect to.
	 */
	public HeufyBot createBot(String hostname) {
		return createBot(hostname, 6667, null, null);
	}
	/**
	 * Attempt to connect to the specified IRC server and port number.
	 * The onConnect method is called upon success.
	 *
	 * @param hostname The hostname of the server to connect to.
	 * @param port The port number to connect to on the server.
	 */
	public HeufyBot createBot(String hostname, int port) throws IOException, IrcException, NickAlreadyInUseException {
		return createBot(hostname, port, null, null);
	}
	/**
	 * Create a bot using the specified hostname, port and socketfactory with no password
	 * @param hostname The hostname of the server to connect to.
	 * @param port The port number to connect to on the server.
	 * @param socketFactory The factory to use for creating sockets, including secure sockets
	 */
	public HeufyBot createBot(String hostname, int port, SocketFactory socketFactory) {
		return createBot(hostname, port, null, socketFactory);
	}
	/**
	 * Create a bot using the specified hostname, port, password, and socketfactory
	 * @param hostname The hostname of the server to connect to.
	 * @param port The port number to connect to on the server.
	 * @param password The password to use to join the server.
	 * @param socketFactory The factory to use for creating sockets, including secure sockets
	 */
	public HeufyBot createBot(String hostname, int port, String password, SocketFactory socketFactory) {
		//Create bot with all of the global settings
		HeufyBot bot = new HeufyBot(true);
		bot.setListenerManager(listenerManager);
		bot.setName(name);
		bot.setVerbose(verbose);
		bot.setSocketTimeout(socketTimeout);
		bot.setMessageDelay(messageDelay);
		bot.setLogin(login);
		bot.setAutoNickChange(autoNickChange);
		bot.setEncoding(encoding);
		bot.setDccInetAddress(dcciNetAddress);
		bot.setDccPorts(dccports);
		//Add to bot set
		bots.add(new BotEntry(bot, hostname, port, password, socketFactory));
		return bot;
	}
	/**
	 * Connect all bots to their respective hosts and channels
	 * @throws IOException if it was not possible to connect to the server.
	 * @throws IrcException if the server would not let us join it.
	 * @throws NickAlreadyInUseException if our nick is already in use on the server.
	 */
	public void connectAll() throws IOException, IrcException, NickAlreadyInUseException {
		for (BotEntry curEntry : bots) {
			HeufyBot bot = curEntry.getBot();
			bot.connect(curEntry.getHostname(), curEntry.getPort(), curEntry.getPassword(), curEntry.getSocketFactory());
		}
	}
	/**
	 * Disconnect all bots from their respective severs cleanly.
	 */
	public void disconnectAll() {
		for (BotEntry curEntry : bots) {
			HeufyBot bot = curEntry.getBot();
			if (bot.isConnected()) bot.disconnect();
		}
	}
	/**
	 * Get all the bots that this MultiBotManager is managing. Do not save this
	 * anywhere as it will be out of date when a new bot is created
	 * @return An <i>unmodifiable</i> Set of bots that are being managed
	 */
	public Set<HeufyBot> getBots() {
		Set<HeufyBot> actualBots = new HashSet();
		for (BotEntry curEntry : bots) actualBots.add(curEntry.getBot());
		return Collections.unmodifiableSet(actualBots);
	}
	
	public void setEncoding(String encoding) throws UnsupportedEncodingException {
		//Test if exception is thrown when setting encoding
		dummyBot.setEncoding(encoding);
		//Good, set value
		this.encoding = dummyBot.getEncoding();
	}
	
	protected class BotEntry {
		protected final HeufyBot bot;
		protected final String hostname;
		protected final int port;
		protected final String password;
		protected final SocketFactory socketFactory;
		
		@java.beans.ConstructorProperties({"bot", "hostname", "port", "password", "socketFactory"})
		@java.lang.SuppressWarnings("all")
		public BotEntry(final HeufyBot bot, final String hostname, final int port, final String password, final SocketFactory socketFactory) {
			this.bot = bot;
			this.hostname = hostname;
			this.port = port;
			this.password = password;
			this.socketFactory = socketFactory;
		}
		
		@java.lang.SuppressWarnings("all")
		public HeufyBot getBot() {
			return this.bot;
		}
		
		@java.lang.SuppressWarnings("all")
		public String getHostname() {
			return this.hostname;
		}
		
		@java.lang.SuppressWarnings("all")
		public int getPort() {
			return this.port;
		}
		
		@java.lang.SuppressWarnings("all")
		public String getPassword() {
			return this.password;
		}
		
		@java.lang.SuppressWarnings("all")
		public SocketFactory getSocketFactory() {
			return this.socketFactory;
		}
		
		@java.lang.Override
		@java.lang.SuppressWarnings("all")
		public boolean equals(final java.lang.Object o) {
			if (o == this) return true;
			if (!(o instanceof MultiBotManager.BotEntry)) return false;
			final BotEntry other = (BotEntry)o;
			if (!other.canEqual((java.lang.Object)this)) return false;
			if (this.getBot() == null ? other.getBot() != null : !this.getBot().equals((java.lang.Object)other.getBot())) return false;
			if (this.getHostname() == null ? other.getHostname() != null : !this.getHostname().equals((java.lang.Object)other.getHostname())) return false;
			if (this.getPort() != other.getPort()) return false;
			if (this.getPassword() == null ? other.getPassword() != null : !this.getPassword().equals((java.lang.Object)other.getPassword())) return false;
			if (this.getSocketFactory() == null ? other.getSocketFactory() != null : !this.getSocketFactory().equals((java.lang.Object)other.getSocketFactory())) return false;
			return true;
		}
		
		@java.lang.SuppressWarnings("all")
		public boolean canEqual(final java.lang.Object other) {
			return other instanceof MultiBotManager.BotEntry;
		}
		
		@java.lang.Override
		@java.lang.SuppressWarnings("all")
		public int hashCode() {
			final int PRIME = 31;
			int result = 1;
			result = result * PRIME + (this.getBot() == null ? 0 : this.getBot().hashCode());
			result = result * PRIME + (this.getHostname() == null ? 0 : this.getHostname().hashCode());
			result = result * PRIME + this.getPort();
			result = result * PRIME + (this.getPassword() == null ? 0 : this.getPassword().hashCode());
			result = result * PRIME + (this.getSocketFactory() == null ? 0 : this.getSocketFactory().hashCode());
			return result;
		}
		
		@java.lang.Override
		@java.lang.SuppressWarnings("all")
		public java.lang.String toString() {
			return "MultiBotManager.BotEntry(bot=" + this.getBot() + ", hostname=" + this.getHostname() + ", port=" + this.getPort() + ", password=" + this.getPassword() + ", socketFactory=" + this.getSocketFactory() + ")";
		}
	}
	
	@java.lang.SuppressWarnings("all")
	public ListenerManager getListenerManager() {
		return this.listenerManager;
	}
	
	@java.lang.SuppressWarnings("all")
	public String getName() {
		return this.name;
	}
	
	@java.lang.SuppressWarnings("all")
	public boolean isVerbose() {
		return this.verbose;
	}
	
	@java.lang.SuppressWarnings("all")
	public int getSocketTimeout() {
		return this.socketTimeout;
	}
	
	@java.lang.SuppressWarnings("all")
	public long getMessageDelay() {
		return this.messageDelay;
	}
	
	@java.lang.SuppressWarnings("all")
	public String getLogin() {
		return this.login;
	}
	
	@java.lang.SuppressWarnings("all")
	public boolean isAutoNickChange() {
		return this.autoNickChange;
	}
	
	@java.lang.SuppressWarnings("all")
	public Charset getEncoding() {
		return this.encoding;
	}
	
	@java.lang.SuppressWarnings("all")
	public InetAddress getDcciNetAddress() {
		return this.dcciNetAddress;
	}
	
	@java.lang.SuppressWarnings("all")
	public List<Integer> getDccports() {
		return this.dccports;
	}
	
	@java.lang.SuppressWarnings("all")
	public void setListenerManager(final ListenerManager listenerManager) {
		this.listenerManager = listenerManager;
	}
	
	@java.lang.SuppressWarnings("all")
	public void setName(final String name) {
		this.name = name;
	}
	
	@java.lang.SuppressWarnings("all")
	public void setVerbose(final boolean verbose) {
		this.verbose = verbose;
	}
	
	@java.lang.SuppressWarnings("all")
	public void setSocketTimeout(final int socketTimeout) {
		this.socketTimeout = socketTimeout;
	}
	
	@java.lang.SuppressWarnings("all")
	public void setMessageDelay(final long messageDelay) {
		this.messageDelay = messageDelay;
	}
	
	@java.lang.SuppressWarnings("all")
	public void setLogin(final String login) {
		this.login = login;
	}
	
	@java.lang.SuppressWarnings("all")
	public void setAutoNickChange(final boolean autoNickChange) {
		this.autoNickChange = autoNickChange;
	}
	
	@java.lang.SuppressWarnings("all")
	public void setDcciNetAddress(final InetAddress dcciNetAddress) {
		this.dcciNetAddress = dcciNetAddress;
	}
	
	@java.lang.SuppressWarnings("all")
	public void setDccports(final List<Integer> dccports) {
		this.dccports = dccports;
	}
	
	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	public boolean equals(final java.lang.Object o) {
		if (o == this) return true;
		if (!(o instanceof MultiBotManager)) return false;
		final MultiBotManager other = (MultiBotManager)o;
		if (!other.canEqual((java.lang.Object)this)) return false;
		if (this.getBots() == null ? other.getBots() != null : !this.getBots().equals((java.lang.Object)other.getBots())) return false;
		if (this.dummyBot == null ? other.dummyBot != null : !this.dummyBot.equals((java.lang.Object)other.dummyBot)) return false;
		if (this.getListenerManager() == null ? other.getListenerManager() != null : !this.getListenerManager().equals((java.lang.Object)other.getListenerManager())) return false;
		if (this.getName() == null ? other.getName() != null : !this.getName().equals((java.lang.Object)other.getName())) return false;
		if (this.isVerbose() != other.isVerbose()) return false;
		if (this.getSocketTimeout() != other.getSocketTimeout()) return false;
		if (this.getMessageDelay() != other.getMessageDelay()) return false;
		if (this.getLogin() == null ? other.getLogin() != null : !this.getLogin().equals((java.lang.Object)other.getLogin())) return false;
		if (this.isAutoNickChange() != other.isAutoNickChange()) return false;
		if (this.getEncoding() == null ? other.getEncoding() != null : !this.getEncoding().equals((java.lang.Object)other.getEncoding())) return false;
		if (this.getDcciNetAddress() == null ? other.getDcciNetAddress() != null : !this.getDcciNetAddress().equals((java.lang.Object)other.getDcciNetAddress())) return false;
		if (this.getDccports() == null ? other.getDccports() != null : !this.getDccports().equals((java.lang.Object)other.getDccports())) return false;
		return true;
	}
	
	@java.lang.SuppressWarnings("all")
	public boolean canEqual(final java.lang.Object other) {
		return other instanceof MultiBotManager;
	}
	
	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	public int hashCode() {
		final int PRIME = 31;
		int result = 1;
		result = result * PRIME + (this.getBots() == null ? 0 : this.getBots().hashCode());
		result = result * PRIME + (this.dummyBot == null ? 0 : this.dummyBot.hashCode());
		result = result * PRIME + (this.getListenerManager() == null ? 0 : this.getListenerManager().hashCode());
		result = result * PRIME + (this.getName() == null ? 0 : this.getName().hashCode());
		result = result * PRIME + (this.isVerbose() ? 1231 : 1237);
		result = result * PRIME + this.getSocketTimeout();
		result = result * PRIME + (int)(this.getMessageDelay() >>> 32 ^ this.getMessageDelay());
		result = result * PRIME + (this.getLogin() == null ? 0 : this.getLogin().hashCode());
		result = result * PRIME + (this.isAutoNickChange() ? 1231 : 1237);
		result = result * PRIME + (this.getEncoding() == null ? 0 : this.getEncoding().hashCode());
		result = result * PRIME + (this.getDcciNetAddress() == null ? 0 : this.getDcciNetAddress().hashCode());
		result = result * PRIME + (this.getDccports() == null ? 0 : this.getDccports().hashCode());
		return result;
	}
	
	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	public java.lang.String toString() {
		return "MultiBotManager(bots=" + this.getBots() + ", dummyBot=" + this.dummyBot + ", listenerManager=" + this.getListenerManager() + ", name=" + this.getName() + ", verbose=" + this.isVerbose() + ", socketTimeout=" + this.getSocketTimeout() + ", messageDelay=" + this.getMessageDelay() + ", login=" + this.getLogin() + ", autoNickChange=" + this.isAutoNickChange() + ", encoding=" + this.getEncoding() + ", dcciNetAddress=" + this.getDcciNetAddress() + ", dccports=" + this.getDccports() + ")";
	}
}