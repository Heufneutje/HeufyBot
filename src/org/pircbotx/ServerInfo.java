// Generated by delombok at Fri May 17 11:49:20 CEST 2013
/**
 * Copyright (C) 2010-2013 Leon Blakey <lord.quackstar at gmail.com>
 *
 * This file is part of PircBotX.
 *
 * PircBotX is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PircBotX is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PircBotX. If not, see <http://www.gnu.org/licenses/>.
 */
package org.pircbotx;

/**
 * This is a giant info bean of various things about the server. This is separate
 * from the {@link HeufyBot} class due to its length
 * <p/>
 * Most info thanks to <a href="www.irc.org/tech_docs/005.html">this great website
 * </a> on what each one does
 *
 * @author Leon Blakey <lord.quackstar at gmail.com>
 */

public class ServerInfo {
	protected final HeufyBot bot;
	
	public void parse(int code, String input) {
		//Strip off name, irrelevant
		String[] parts = input.split(" ", 2);
		//Pass off to speicific methods
		if (parts[0].equals("004")) parse004(parts[1]); else if (parts[0].equals("005")) parse005(parts[1]);
	}
	
	protected void parse004(String input) {
		//004 PircBotX pratchett.freenode.net ircd-seven-1.1.3 DOQRSZaghilopswz CFILMPQbcefgijklmnopqrstvz bkloveqjfI
		String[] inputParts = input.split(" ");
		serverName = inputParts[0];
		serverVersion = inputParts[1];
		userModes = inputParts[2];
		channelModes = inputParts[3];
	}
	
	protected void parse005(String input) {
		//REFERENCE: http://www.irc.org/tech_docs/005.html
		//Remove any comments at the end of the line
		String cleanInput = input.split(" :", 2)[0];
		for (String curItem : cleanInput.split(" ")) {
			String[] itemParts = curItem.split("=", 2);
			String key = itemParts[0];
			String value = (itemParts.length == 2) ? itemParts[1] : "";
			if (key.equalsIgnoreCase("PREFIX")) prefixes = value; else if (key.equalsIgnoreCase("CHANTYPES")) channelTypes = value; else if (key.equalsIgnoreCase("CHANMODES")) channelModes = value; else if (key.equalsIgnoreCase("MODES")) maxModes = Integer.parseInt(value); else if (key.equalsIgnoreCase("MAXCHANNELS")) maxChannels = Integer.parseInt(value); else if (key.equalsIgnoreCase("CHANLIMIT")) chanlimit = value; else if (key.equalsIgnoreCase("NICKLEN")) maxNickLength = Integer.parseInt(value); else if (key.equalsIgnoreCase("MAXLIST")) maxBans = Integer.parseInt(value); else if (key.equalsIgnoreCase("MAXLIST")) maxList = value; else if (key.equalsIgnoreCase("NETWORK")) network = value; else if (key.equalsIgnoreCase("EXCEPTS")) exceptBans = value; else if (key.equalsIgnoreCase("INVEX")) exceptInvites = value; else if (key.equalsIgnoreCase("WALLCHOPS")) wallOps = true; else if (key.equalsIgnoreCase("WALLVOICES")) wallVoices = true; else if (key.equalsIgnoreCase("STATUSMSG")) statusMessage = value; else if (key.equalsIgnoreCase("CASEMAPPING")) caseMapping = value; else if (key.equalsIgnoreCase("ELIST")) eList = value; else if (key.equalsIgnoreCase("TOPICLEN")) topicLength = Integer.parseInt(value); else if (key.equalsIgnoreCase("KICKLEN")) kickLength = Integer.parseInt(value); else if (key.equalsIgnoreCase("CHANNELLEN")) channelLength = Integer.parseInt(value); else if (key.equalsIgnoreCase("CHIDLEN")) channelIDLength = "!:" + Integer.parseInt(value); else if (key.equalsIgnoreCase("IDCHAN")) channelIDLength = value; else if (key.equalsIgnoreCase("STD")) standard = value; else if (key.equalsIgnoreCase("SILENCE")) silence = Integer.parseInt(value); else if (key.equalsIgnoreCase("RFC2812")) RFC2812 = true; else if (key.equalsIgnoreCase("PENALTY")) penalty = true; else if (key.equalsIgnoreCase("CPRIVMSG")) cPrivMsgExists = true; else if (key.equalsIgnoreCase("CNOTICE")) cNoticeExists = true; else if (key.equalsIgnoreCase("SAFELIST")) safeList = true; else if (key.equalsIgnoreCase("KNOCK")) knockExists = true; else if (key.equalsIgnoreCase("WHOX")) whoX = true; else if (key.equalsIgnoreCase("CALLERID") || key.equalsIgnoreCase("ACCEPT")) callerID = true; else if (key.equalsIgnoreCase("USERIP")) userIPExists = true; else if (key.equalsIgnoreCase("CNOTICE")) cNoticeExists = true;
		}
		//Freenode
		//005 PircBotX CHANTYPES=# EXCEPTS INVEX CHANMODES=eIbq,k,flj,CFLMPQcgimnprstz CHANLIMIT=#:120 PREFIX=(ov)@+ MAXLIST=bqeI:100 MODES=4 NETWORK=freenode KNOCK STATUSMSG=@+ CALLERID=g :are supported by this server
		//005 PircBotX CASEMAPPING=rfc1459 CHARSET=ascii NICKLEN=16 CHANNELLEN=50 TOPICLEN=390 ETRACE CPRIVMSG CNOTICE DEAF=D MONITOR=100 FNC TARGMAX=NAMES:1,LIST:1,KICK:1,WHOIS:1,PRIVMSG:4,NOTICE:4,ACCEPT:,MONITOR: :are supported by this server
		//005 PircBotX EXTBAN=$,arx WHOX CLIENTVER=3.0 SAFELIST ELIST=CTU :are supported by this server
		//Rizon
		//005 PircBotX CALLERID CASEMAPPING=rfc1459 DEAF=D KICKLEN=160 MODES=4 NICKLEN=30 TOPICLEN=390 PREFIX=(qaohv)~&@%+ STATUSMSG=~&@%+ NETWORK=Rizon MAXLIST=beI:100 TARGMAX=ACCEPT:,KICK:1,LIST:1,NAMES:1,NOTICE:4,PRIVMSG:4,WHOIS:1 CHANTYPES=# :are supported by this server
		//005 PircBotX CHANLIMIT=#:75 CHANNELLEN=50 CHANMODES=beI,k,l,BCMNORScimnpstz AWAYLEN=160 ELIST=CMNTU SAFELIST KNOCK NAMESX UHNAMES FNC EXCEPTS=e INVEX=I :are supported by this server
	}
	//004 information
	protected String serverName;
	protected String serverVersion;
	protected String userModes;
	//005 information
	protected String prefixes;
	protected String channelTypes;
	protected String channelModes;
	protected int maxModes;
	protected int maxChannels;
	protected String chanlimit;
	protected int maxNickLength;
	protected int maxBans;
	protected String maxList;
	protected String network;
	protected String exceptBans;
	protected String exceptInvites;
	protected String invites;
	protected boolean wallOps;
	protected boolean wallVoices;
	protected String statusMessage;
	protected String caseMapping;
	protected String eList;
	protected int topicLength;
	protected int kickLength;
	protected int channelLength;
	protected String channelIDLength;
	protected String standard;
	protected int silence;
	protected boolean RFC2812;
	protected boolean penalty;
	protected boolean forcedNickChanges;
	protected boolean safeList;
	protected int awayLength;
	protected boolean noQuit;
	protected boolean userIPExists;
	protected boolean cPrivMsgExists;
	protected boolean cNoticeExists;
	protected int maxTargets;
	protected boolean knockExists;
	protected boolean vChannels;
	protected int watchMax;
	protected boolean whoX;
	protected boolean callerID;
	protected boolean accept;
	protected String language;
	//Other information
	protected String motd;
	protected int highestConnections;
	protected int highestClients;
	protected int totalUsers;
	protected int totalInvisibleUsers;
	protected int totalServers;
	protected int totalOperatorsOnline;
	protected int totalUnknownConnections;
	protected int totalChannelsFormed;
	protected int serverUsers;
	protected int connectedServers;
	
	@java.beans.ConstructorProperties({"bot"})
	@java.lang.SuppressWarnings("all")
	public ServerInfo(final HeufyBot bot) {
		
		this.bot = bot;
	}
	
	@java.lang.SuppressWarnings("all")
	public HeufyBot getBot() {
		return this.bot;
	}
	
	@java.lang.SuppressWarnings("all")
	public String getServerName() {
		return this.serverName;
	}
	
	@java.lang.SuppressWarnings("all")
	public String getServerVersion() {
		return this.serverVersion;
	}
	
	@java.lang.SuppressWarnings("all")
	public String getUserModes() {
		return this.userModes;
	}
	
	@java.lang.SuppressWarnings("all")
	public String getPrefixes() {
		return this.prefixes;
	}
	
	@java.lang.SuppressWarnings("all")
	public String getChannelTypes() {
		return this.channelTypes;
	}
	
	@java.lang.SuppressWarnings("all")
	public String getChannelModes() {
		return this.channelModes;
	}
	
	@java.lang.SuppressWarnings("all")
	public int getMaxModes() {
		return this.maxModes;
	}
	
	@java.lang.SuppressWarnings("all")
	public int getMaxChannels() {
		return this.maxChannels;
	}
	
	@java.lang.SuppressWarnings("all")
	public String getChanlimit() {
		return this.chanlimit;
	}
	
	@java.lang.SuppressWarnings("all")
	public int getMaxNickLength() {
		return this.maxNickLength;
	}
	
	@java.lang.SuppressWarnings("all")
	public int getMaxBans() {
		return this.maxBans;
	}
	
	@java.lang.SuppressWarnings("all")
	public String getMaxList() {
		return this.maxList;
	}
	
	@java.lang.SuppressWarnings("all")
	public String getNetwork() {
		return this.network;
	}
	
	@java.lang.SuppressWarnings("all")
	public String getExceptBans() {
		return this.exceptBans;
	}
	
	@java.lang.SuppressWarnings("all")
	public String getExceptInvites() {
		return this.exceptInvites;
	}
	
	@java.lang.SuppressWarnings("all")
	public String getInvites() {
		return this.invites;
	}
	
	@java.lang.SuppressWarnings("all")
	public boolean isWallOps() {
		return this.wallOps;
	}
	
	@java.lang.SuppressWarnings("all")
	public boolean isWallVoices() {
		return this.wallVoices;
	}
	
	@java.lang.SuppressWarnings("all")
	public String getStatusMessage() {
		return this.statusMessage;
	}
	
	@java.lang.SuppressWarnings("all")
	public String getCaseMapping() {
		return this.caseMapping;
	}
	
	@java.lang.SuppressWarnings("all")
	public String getEList() {
		return this.eList;
	}
	
	@java.lang.SuppressWarnings("all")
	public int getTopicLength() {
		return this.topicLength;
	}
	
	@java.lang.SuppressWarnings("all")
	public int getKickLength() {
		return this.kickLength;
	}
	
	@java.lang.SuppressWarnings("all")
	public int getChannelLength() {
		return this.channelLength;
	}
	
	@java.lang.SuppressWarnings("all")
	public String getChannelIDLength() {
		return this.channelIDLength;
	}
	
	@java.lang.SuppressWarnings("all")
	public String getStandard() {
		return this.standard;
	}
	
	@java.lang.SuppressWarnings("all")
	public int getSilence() {
		return this.silence;
	}
	
	@java.lang.SuppressWarnings("all")
	public boolean isRFC2812() {
		return this.RFC2812;
	}
	
	@java.lang.SuppressWarnings("all")
	public boolean isPenalty() {
		return this.penalty;
	}
	
	@java.lang.SuppressWarnings("all")
	public boolean isForcedNickChanges() {
		return this.forcedNickChanges;
	}
	
	@java.lang.SuppressWarnings("all")
	public boolean isSafeList() {
		return this.safeList;
	}
	
	@java.lang.SuppressWarnings("all")
	public int getAwayLength() {
		return this.awayLength;
	}
	
	@java.lang.SuppressWarnings("all")
	public boolean isNoQuit() {
		return this.noQuit;
	}
	
	@java.lang.SuppressWarnings("all")
	public boolean isUserIPExists() {
		return this.userIPExists;
	}
	
	@java.lang.SuppressWarnings("all")
	public boolean isCPrivMsgExists() {
		return this.cPrivMsgExists;
	}
	
	@java.lang.SuppressWarnings("all")
	public boolean isCNoticeExists() {
		return this.cNoticeExists;
	}
	
	@java.lang.SuppressWarnings("all")
	public int getMaxTargets() {
		return this.maxTargets;
	}
	
	@java.lang.SuppressWarnings("all")
	public boolean isKnockExists() {
		return this.knockExists;
	}
	
	@java.lang.SuppressWarnings("all")
	public boolean isVChannels() {
		return this.vChannels;
	}
	
	@java.lang.SuppressWarnings("all")
	public int getWatchMax() {
		return this.watchMax;
	}
	
	@java.lang.SuppressWarnings("all")
	public boolean isWhoX() {
		return this.whoX;
	}
	
	@java.lang.SuppressWarnings("all")
	public boolean isCallerID() {
		return this.callerID;
	}
	
	@java.lang.SuppressWarnings("all")
	public boolean isAccept() {
		return this.accept;
	}
	
	@java.lang.SuppressWarnings("all")
	public String getLanguage() {
		return this.language;
	}
	
	@java.lang.SuppressWarnings("all")
	public String getMotd() {
		return this.motd;
	}
	
	@java.lang.SuppressWarnings("all")
	public int getHighestConnections() {
		return this.highestConnections;
	}
	
	@java.lang.SuppressWarnings("all")
	public int getHighestClients() {
		return this.highestClients;
	}
	
	@java.lang.SuppressWarnings("all")
	public int getTotalUsers() {
		return this.totalUsers;
	}
	
	@java.lang.SuppressWarnings("all")
	public int getTotalInvisibleUsers() {
		return this.totalInvisibleUsers;
	}
	
	@java.lang.SuppressWarnings("all")
	public int getTotalServers() {
		return this.totalServers;
	}
	
	@java.lang.SuppressWarnings("all")
	public int getTotalOperatorsOnline() {
		return this.totalOperatorsOnline;
	}
	
	@java.lang.SuppressWarnings("all")
	public int getTotalUnknownConnections() {
		return this.totalUnknownConnections;
	}
	
	@java.lang.SuppressWarnings("all")
	public int getTotalChannelsFormed() {
		return this.totalChannelsFormed;
	}
	
	@java.lang.SuppressWarnings("all")
	public int getServerUsers() {
		return this.serverUsers;
	}
	
	@java.lang.SuppressWarnings("all")
	public int getConnectedServers() {
		return this.connectedServers;
	}
	
	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	public boolean equals(final java.lang.Object o) {
		if (o == this) return true;
		if (!(o instanceof ServerInfo)) return false;
		final ServerInfo other = (ServerInfo)o;
		if (!other.canEqual((java.lang.Object)this)) return false;
		final java.lang.Object this$bot = this.getBot();
		final java.lang.Object other$bot = other.getBot();
		if (this$bot == null ? other$bot != null : !this$bot.equals(other$bot)) return false;
		final java.lang.Object this$serverName = this.getServerName();
		final java.lang.Object other$serverName = other.getServerName();
		if (this$serverName == null ? other$serverName != null : !this$serverName.equals(other$serverName)) return false;
		final java.lang.Object this$serverVersion = this.getServerVersion();
		final java.lang.Object other$serverVersion = other.getServerVersion();
		if (this$serverVersion == null ? other$serverVersion != null : !this$serverVersion.equals(other$serverVersion)) return false;
		final java.lang.Object this$userModes = this.getUserModes();
		final java.lang.Object other$userModes = other.getUserModes();
		if (this$userModes == null ? other$userModes != null : !this$userModes.equals(other$userModes)) return false;
		final java.lang.Object this$prefixes = this.getPrefixes();
		final java.lang.Object other$prefixes = other.getPrefixes();
		if (this$prefixes == null ? other$prefixes != null : !this$prefixes.equals(other$prefixes)) return false;
		final java.lang.Object this$channelTypes = this.getChannelTypes();
		final java.lang.Object other$channelTypes = other.getChannelTypes();
		if (this$channelTypes == null ? other$channelTypes != null : !this$channelTypes.equals(other$channelTypes)) return false;
		final java.lang.Object this$channelModes = this.getChannelModes();
		final java.lang.Object other$channelModes = other.getChannelModes();
		if (this$channelModes == null ? other$channelModes != null : !this$channelModes.equals(other$channelModes)) return false;
		if (this.getMaxModes() != other.getMaxModes()) return false;
		if (this.getMaxChannels() != other.getMaxChannels()) return false;
		final java.lang.Object this$chanlimit = this.getChanlimit();
		final java.lang.Object other$chanlimit = other.getChanlimit();
		if (this$chanlimit == null ? other$chanlimit != null : !this$chanlimit.equals(other$chanlimit)) return false;
		if (this.getMaxNickLength() != other.getMaxNickLength()) return false;
		if (this.getMaxBans() != other.getMaxBans()) return false;
		final java.lang.Object this$maxList = this.getMaxList();
		final java.lang.Object other$maxList = other.getMaxList();
		if (this$maxList == null ? other$maxList != null : !this$maxList.equals(other$maxList)) return false;
		final java.lang.Object this$network = this.getNetwork();
		final java.lang.Object other$network = other.getNetwork();
		if (this$network == null ? other$network != null : !this$network.equals(other$network)) return false;
		final java.lang.Object this$exceptBans = this.getExceptBans();
		final java.lang.Object other$exceptBans = other.getExceptBans();
		if (this$exceptBans == null ? other$exceptBans != null : !this$exceptBans.equals(other$exceptBans)) return false;
		final java.lang.Object this$exceptInvites = this.getExceptInvites();
		final java.lang.Object other$exceptInvites = other.getExceptInvites();
		if (this$exceptInvites == null ? other$exceptInvites != null : !this$exceptInvites.equals(other$exceptInvites)) return false;
		final java.lang.Object this$invites = this.getInvites();
		final java.lang.Object other$invites = other.getInvites();
		if (this$invites == null ? other$invites != null : !this$invites.equals(other$invites)) return false;
		if (this.isWallOps() != other.isWallOps()) return false;
		if (this.isWallVoices() != other.isWallVoices()) return false;
		final java.lang.Object this$statusMessage = this.getStatusMessage();
		final java.lang.Object other$statusMessage = other.getStatusMessage();
		if (this$statusMessage == null ? other$statusMessage != null : !this$statusMessage.equals(other$statusMessage)) return false;
		final java.lang.Object this$caseMapping = this.getCaseMapping();
		final java.lang.Object other$caseMapping = other.getCaseMapping();
		if (this$caseMapping == null ? other$caseMapping != null : !this$caseMapping.equals(other$caseMapping)) return false;
		final java.lang.Object this$eList = this.getEList();
		final java.lang.Object other$eList = other.getEList();
		if (this$eList == null ? other$eList != null : !this$eList.equals(other$eList)) return false;
		if (this.getTopicLength() != other.getTopicLength()) return false;
		if (this.getKickLength() != other.getKickLength()) return false;
		if (this.getChannelLength() != other.getChannelLength()) return false;
		final java.lang.Object this$channelIDLength = this.getChannelIDLength();
		final java.lang.Object other$channelIDLength = other.getChannelIDLength();
		if (this$channelIDLength == null ? other$channelIDLength != null : !this$channelIDLength.equals(other$channelIDLength)) return false;
		final java.lang.Object this$standard = this.getStandard();
		final java.lang.Object other$standard = other.getStandard();
		if (this$standard == null ? other$standard != null : !this$standard.equals(other$standard)) return false;
		if (this.getSilence() != other.getSilence()) return false;
		if (this.isRFC2812() != other.isRFC2812()) return false;
		if (this.isPenalty() != other.isPenalty()) return false;
		if (this.isForcedNickChanges() != other.isForcedNickChanges()) return false;
		if (this.isSafeList() != other.isSafeList()) return false;
		if (this.getAwayLength() != other.getAwayLength()) return false;
		if (this.isNoQuit() != other.isNoQuit()) return false;
		if (this.isUserIPExists() != other.isUserIPExists()) return false;
		if (this.isCPrivMsgExists() != other.isCPrivMsgExists()) return false;
		if (this.isCNoticeExists() != other.isCNoticeExists()) return false;
		if (this.getMaxTargets() != other.getMaxTargets()) return false;
		if (this.isKnockExists() != other.isKnockExists()) return false;
		if (this.isVChannels() != other.isVChannels()) return false;
		if (this.getWatchMax() != other.getWatchMax()) return false;
		if (this.isWhoX() != other.isWhoX()) return false;
		if (this.isCallerID() != other.isCallerID()) return false;
		if (this.isAccept() != other.isAccept()) return false;
		final java.lang.Object this$language = this.getLanguage();
		final java.lang.Object other$language = other.getLanguage();
		if (this$language == null ? other$language != null : !this$language.equals(other$language)) return false;
		final java.lang.Object this$motd = this.getMotd();
		final java.lang.Object other$motd = other.getMotd();
		if (this$motd == null ? other$motd != null : !this$motd.equals(other$motd)) return false;
		if (this.getHighestConnections() != other.getHighestConnections()) return false;
		if (this.getHighestClients() != other.getHighestClients()) return false;
		if (this.getTotalUsers() != other.getTotalUsers()) return false;
		if (this.getTotalInvisibleUsers() != other.getTotalInvisibleUsers()) return false;
		if (this.getTotalServers() != other.getTotalServers()) return false;
		if (this.getTotalOperatorsOnline() != other.getTotalOperatorsOnline()) return false;
		if (this.getTotalUnknownConnections() != other.getTotalUnknownConnections()) return false;
		if (this.getTotalChannelsFormed() != other.getTotalChannelsFormed()) return false;
		if (this.getServerUsers() != other.getServerUsers()) return false;
		if (this.getConnectedServers() != other.getConnectedServers()) return false;
		return true;
	}
	
	@java.lang.SuppressWarnings("all")
	public boolean canEqual(final java.lang.Object other) {
		return other instanceof ServerInfo;
	}
	
	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	public int hashCode() {
		final int PRIME = 31;
		int result = 1;
		final java.lang.Object $bot = this.getBot();
		result = result * PRIME + ($bot == null ? 0 : $bot.hashCode());
		final java.lang.Object $serverName = this.getServerName();
		result = result * PRIME + ($serverName == null ? 0 : $serverName.hashCode());
		final java.lang.Object $serverVersion = this.getServerVersion();
		result = result * PRIME + ($serverVersion == null ? 0 : $serverVersion.hashCode());
		final java.lang.Object $userModes = this.getUserModes();
		result = result * PRIME + ($userModes == null ? 0 : $userModes.hashCode());
		final java.lang.Object $prefixes = this.getPrefixes();
		result = result * PRIME + ($prefixes == null ? 0 : $prefixes.hashCode());
		final java.lang.Object $channelTypes = this.getChannelTypes();
		result = result * PRIME + ($channelTypes == null ? 0 : $channelTypes.hashCode());
		final java.lang.Object $channelModes = this.getChannelModes();
		result = result * PRIME + ($channelModes == null ? 0 : $channelModes.hashCode());
		result = result * PRIME + this.getMaxModes();
		result = result * PRIME + this.getMaxChannels();
		final java.lang.Object $chanlimit = this.getChanlimit();
		result = result * PRIME + ($chanlimit == null ? 0 : $chanlimit.hashCode());
		result = result * PRIME + this.getMaxNickLength();
		result = result * PRIME + this.getMaxBans();
		final java.lang.Object $maxList = this.getMaxList();
		result = result * PRIME + ($maxList == null ? 0 : $maxList.hashCode());
		final java.lang.Object $network = this.getNetwork();
		result = result * PRIME + ($network == null ? 0 : $network.hashCode());
		final java.lang.Object $exceptBans = this.getExceptBans();
		result = result * PRIME + ($exceptBans == null ? 0 : $exceptBans.hashCode());
		final java.lang.Object $exceptInvites = this.getExceptInvites();
		result = result * PRIME + ($exceptInvites == null ? 0 : $exceptInvites.hashCode());
		final java.lang.Object $invites = this.getInvites();
		result = result * PRIME + ($invites == null ? 0 : $invites.hashCode());
		result = result * PRIME + (this.isWallOps() ? 1231 : 1237);
		result = result * PRIME + (this.isWallVoices() ? 1231 : 1237);
		final java.lang.Object $statusMessage = this.getStatusMessage();
		result = result * PRIME + ($statusMessage == null ? 0 : $statusMessage.hashCode());
		final java.lang.Object $caseMapping = this.getCaseMapping();
		result = result * PRIME + ($caseMapping == null ? 0 : $caseMapping.hashCode());
		final java.lang.Object $eList = this.getEList();
		result = result * PRIME + ($eList == null ? 0 : $eList.hashCode());
		result = result * PRIME + this.getTopicLength();
		result = result * PRIME + this.getKickLength();
		result = result * PRIME + this.getChannelLength();
		final java.lang.Object $channelIDLength = this.getChannelIDLength();
		result = result * PRIME + ($channelIDLength == null ? 0 : $channelIDLength.hashCode());
		final java.lang.Object $standard = this.getStandard();
		result = result * PRIME + ($standard == null ? 0 : $standard.hashCode());
		result = result * PRIME + this.getSilence();
		result = result * PRIME + (this.isRFC2812() ? 1231 : 1237);
		result = result * PRIME + (this.isPenalty() ? 1231 : 1237);
		result = result * PRIME + (this.isForcedNickChanges() ? 1231 : 1237);
		result = result * PRIME + (this.isSafeList() ? 1231 : 1237);
		result = result * PRIME + this.getAwayLength();
		result = result * PRIME + (this.isNoQuit() ? 1231 : 1237);
		result = result * PRIME + (this.isUserIPExists() ? 1231 : 1237);
		result = result * PRIME + (this.isCPrivMsgExists() ? 1231 : 1237);
		result = result * PRIME + (this.isCNoticeExists() ? 1231 : 1237);
		result = result * PRIME + this.getMaxTargets();
		result = result * PRIME + (this.isKnockExists() ? 1231 : 1237);
		result = result * PRIME + (this.isVChannels() ? 1231 : 1237);
		result = result * PRIME + this.getWatchMax();
		result = result * PRIME + (this.isWhoX() ? 1231 : 1237);
		result = result * PRIME + (this.isCallerID() ? 1231 : 1237);
		result = result * PRIME + (this.isAccept() ? 1231 : 1237);
		final java.lang.Object $language = this.getLanguage();
		result = result * PRIME + ($language == null ? 0 : $language.hashCode());
		final java.lang.Object $motd = this.getMotd();
		result = result * PRIME + ($motd == null ? 0 : $motd.hashCode());
		result = result * PRIME + this.getHighestConnections();
		result = result * PRIME + this.getHighestClients();
		result = result * PRIME + this.getTotalUsers();
		result = result * PRIME + this.getTotalInvisibleUsers();
		result = result * PRIME + this.getTotalServers();
		result = result * PRIME + this.getTotalOperatorsOnline();
		result = result * PRIME + this.getTotalUnknownConnections();
		result = result * PRIME + this.getTotalChannelsFormed();
		result = result * PRIME + this.getServerUsers();
		result = result * PRIME + this.getConnectedServers();
		return result;
	}
	
	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	public java.lang.String toString() {
		return "ServerInfo(bot=" + this.getBot() + ", serverName=" + this.getServerName() + ", serverVersion=" + this.getServerVersion() + ", userModes=" + this.getUserModes() + ", prefixes=" + this.getPrefixes() + ", channelTypes=" + this.getChannelTypes() + ", channelModes=" + this.getChannelModes() + ", maxModes=" + this.getMaxModes() + ", maxChannels=" + this.getMaxChannels() + ", chanlimit=" + this.getChanlimit() + ", maxNickLength=" + this.getMaxNickLength() + ", maxBans=" + this.getMaxBans() + ", maxList=" + this.getMaxList() + ", network=" + this.getNetwork() + ", exceptBans=" + this.getExceptBans() + ", exceptInvites=" + this.getExceptInvites() + ", invites=" + this.getInvites() + ", wallOps=" + this.isWallOps() + ", wallVoices=" + this.isWallVoices() + ", statusMessage=" + this.getStatusMessage() + ", caseMapping=" + this.getCaseMapping() + ", eList=" + this.getEList() + ", topicLength=" + this.getTopicLength() + ", kickLength=" + this.getKickLength() + ", channelLength=" + this.getChannelLength() + ", channelIDLength=" + this.getChannelIDLength() + ", standard=" + this.getStandard() + ", silence=" + this.getSilence() + ", RFC2812=" + this.isRFC2812() + ", penalty=" + this.isPenalty() + ", forcedNickChanges=" + this.isForcedNickChanges() + ", safeList=" + this.isSafeList() + ", awayLength=" + this.getAwayLength() + ", noQuit=" + this.isNoQuit() + ", userIPExists=" + this.isUserIPExists() + ", cPrivMsgExists=" + this.isCPrivMsgExists() + ", cNoticeExists=" + this.isCNoticeExists() + ", maxTargets=" + this.getMaxTargets() + ", knockExists=" + this.isKnockExists() + ", vChannels=" + this.isVChannels() + ", watchMax=" + this.getWatchMax() + ", whoX=" + this.isWhoX() + ", callerID=" + this.isCallerID() + ", accept=" + this.isAccept() + ", language=" + this.getLanguage() + ", motd=" + this.getMotd() + ", highestConnections=" + this.getHighestConnections() + ", highestClients=" + this.getHighestClients() + ", totalUsers=" + this.getTotalUsers() + ", totalInvisibleUsers=" + this.getTotalInvisibleUsers() + ", totalServers=" + this.getTotalServers() + ", totalOperatorsOnline=" + this.getTotalOperatorsOnline() + ", totalUnknownConnections=" + this.getTotalUnknownConnections() + ", totalChannelsFormed=" + this.getTotalChannelsFormed() + ", serverUsers=" + this.getServerUsers() + ", connectedServers=" + this.getConnectedServers() + ")";
	}
	
	@java.lang.SuppressWarnings("all")
	void setServerName(final String serverName) {
		this.serverName = serverName;
	}
	
	@java.lang.SuppressWarnings("all")
	void setServerVersion(final String serverVersion) {
		this.serverVersion = serverVersion;
	}
	
	@java.lang.SuppressWarnings("all")
	void setUserModes(final String userModes) {
		this.userModes = userModes;
	}
	
	@java.lang.SuppressWarnings("all")
	void setPrefixes(final String prefixes) {
		this.prefixes = prefixes;
	}
	
	@java.lang.SuppressWarnings("all")
	void setChannelTypes(final String channelTypes) {
		this.channelTypes = channelTypes;
	}
	
	@java.lang.SuppressWarnings("all")
	void setChannelModes(final String channelModes) {
		this.channelModes = channelModes;
	}
	
	@java.lang.SuppressWarnings("all")
	void setMaxModes(final int maxModes) {
		this.maxModes = maxModes;
	}
	
	@java.lang.SuppressWarnings("all")
	void setMaxChannels(final int maxChannels) {
		this.maxChannels = maxChannels;
	}
	
	@java.lang.SuppressWarnings("all")
	void setChanlimit(final String chanlimit) {
		this.chanlimit = chanlimit;
	}
	
	@java.lang.SuppressWarnings("all")
	void setMaxNickLength(final int maxNickLength) {
		this.maxNickLength = maxNickLength;
	}
	
	@java.lang.SuppressWarnings("all")
	void setMaxBans(final int maxBans) {
		this.maxBans = maxBans;
	}
	
	@java.lang.SuppressWarnings("all")
	void setMaxList(final String maxList) {
		this.maxList = maxList;
	}
	
	@java.lang.SuppressWarnings("all")
	void setNetwork(final String network) {
		this.network = network;
	}
	
	@java.lang.SuppressWarnings("all")
	void setExceptBans(final String exceptBans) {
		this.exceptBans = exceptBans;
	}
	
	@java.lang.SuppressWarnings("all")
	void setExceptInvites(final String exceptInvites) {
		this.exceptInvites = exceptInvites;
	}
	
	@java.lang.SuppressWarnings("all")
	void setInvites(final String invites) {
		this.invites = invites;
	}
	
	@java.lang.SuppressWarnings("all")
	void setWallOps(final boolean wallOps) {
		this.wallOps = wallOps;
	}
	
	@java.lang.SuppressWarnings("all")
	void setWallVoices(final boolean wallVoices) {
		this.wallVoices = wallVoices;
	}
	
	@java.lang.SuppressWarnings("all")
	void setStatusMessage(final String statusMessage) {
		this.statusMessage = statusMessage;
	}
	
	@java.lang.SuppressWarnings("all")
	void setCaseMapping(final String caseMapping) {
		this.caseMapping = caseMapping;
	}
	
	@java.lang.SuppressWarnings("all")
	void setEList(final String eList) {
		this.eList = eList;
	}
	
	@java.lang.SuppressWarnings("all")
	void setTopicLength(final int topicLength) {
		this.topicLength = topicLength;
	}
	
	@java.lang.SuppressWarnings("all")
	void setKickLength(final int kickLength) {
		this.kickLength = kickLength;
	}
	
	@java.lang.SuppressWarnings("all")
	void setChannelLength(final int channelLength) {
		this.channelLength = channelLength;
	}
	
	@java.lang.SuppressWarnings("all")
	void setChannelIDLength(final String channelIDLength) {
		this.channelIDLength = channelIDLength;
	}
	
	@java.lang.SuppressWarnings("all")
	void setStandard(final String standard) {
		this.standard = standard;
	}
	
	@java.lang.SuppressWarnings("all")
	void setSilence(final int silence) {
		this.silence = silence;
	}
	
	@java.lang.SuppressWarnings("all")
	void setRFC2812(final boolean RFC2812) {
		this.RFC2812 = RFC2812;
	}
	
	@java.lang.SuppressWarnings("all")
	void setPenalty(final boolean penalty) {
		this.penalty = penalty;
	}
	
	@java.lang.SuppressWarnings("all")
	void setForcedNickChanges(final boolean forcedNickChanges) {
		this.forcedNickChanges = forcedNickChanges;
	}
	
	@java.lang.SuppressWarnings("all")
	void setSafeList(final boolean safeList) {
		this.safeList = safeList;
	}
	
	@java.lang.SuppressWarnings("all")
	void setAwayLength(final int awayLength) {
		this.awayLength = awayLength;
	}
	
	@java.lang.SuppressWarnings("all")
	void setNoQuit(final boolean noQuit) {
		this.noQuit = noQuit;
	}
	
	@java.lang.SuppressWarnings("all")
	void setUserIPExists(final boolean userIPExists) {
		this.userIPExists = userIPExists;
	}
	
	@java.lang.SuppressWarnings("all")
	void setCPrivMsgExists(final boolean cPrivMsgExists) {
		this.cPrivMsgExists = cPrivMsgExists;
	}
	
	@java.lang.SuppressWarnings("all")
	void setCNoticeExists(final boolean cNoticeExists) {
		this.cNoticeExists = cNoticeExists;
	}
	
	@java.lang.SuppressWarnings("all")
	void setMaxTargets(final int maxTargets) {
		this.maxTargets = maxTargets;
	}
	
	@java.lang.SuppressWarnings("all")
	void setKnockExists(final boolean knockExists) {
		this.knockExists = knockExists;
	}
	
	@java.lang.SuppressWarnings("all")
	void setVChannels(final boolean vChannels) {
		this.vChannels = vChannels;
	}
	
	@java.lang.SuppressWarnings("all")
	void setWatchMax(final int watchMax) {
		this.watchMax = watchMax;
	}
	
	@java.lang.SuppressWarnings("all")
	void setWhoX(final boolean whoX) {
		this.whoX = whoX;
	}
	
	@java.lang.SuppressWarnings("all")
	void setCallerID(final boolean callerID) {
		this.callerID = callerID;
	}
	
	@java.lang.SuppressWarnings("all")
	void setAccept(final boolean accept) {
		this.accept = accept;
	}
	
	@java.lang.SuppressWarnings("all")
	void setLanguage(final String language) {
		this.language = language;
	}
	
	@java.lang.SuppressWarnings("all")
	void setMotd(final String motd) {
		this.motd = motd;
	}
	
	@java.lang.SuppressWarnings("all")
	void setHighestConnections(final int highestConnections) {
		this.highestConnections = highestConnections;
	}
	
	@java.lang.SuppressWarnings("all")
	void setHighestClients(final int highestClients) {
		this.highestClients = highestClients;
	}
	
	@java.lang.SuppressWarnings("all")
	void setTotalUsers(final int totalUsers) {
		this.totalUsers = totalUsers;
	}
	
	@java.lang.SuppressWarnings("all")
	void setTotalInvisibleUsers(final int totalInvisibleUsers) {
		this.totalInvisibleUsers = totalInvisibleUsers;
	}
	
	@java.lang.SuppressWarnings("all")
	void setTotalServers(final int totalServers) {
		this.totalServers = totalServers;
	}
	
	@java.lang.SuppressWarnings("all")
	void setTotalOperatorsOnline(final int totalOperatorsOnline) {
		this.totalOperatorsOnline = totalOperatorsOnline;
	}
	
	@java.lang.SuppressWarnings("all")
	void setTotalUnknownConnections(final int totalUnknownConnections) {
		this.totalUnknownConnections = totalUnknownConnections;
	}
	
	@java.lang.SuppressWarnings("all")
	void setTotalChannelsFormed(final int totalChannelsFormed) {
		this.totalChannelsFormed = totalChannelsFormed;
	}
	
	@java.lang.SuppressWarnings("all")
	void setServerUsers(final int serverUsers) {
		this.serverUsers = serverUsers;
	}
	
	@java.lang.SuppressWarnings("all")
	void setConnectedServers(final int connectedServers) {
		this.connectedServers = connectedServers;
	}
}