// Generated by delombok at Fri May 17 11:49:19 CEST 2013
/**
 * Copyright (C) 2010-2013 Leon Blakey <lord.quackstar at gmail.com>
 *
 * This file is part of PircBotX.
 *
 * PircBotX is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PircBotX is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PircBotX. If not, see <http://www.gnu.org/licenses/>.
 */
package org.pircbotx.hooks.events;

import java.util.Set;
import org.pircbotx.Channel;
import org.pircbotx.User;
import org.pircbotx.hooks.Event;
import org.pircbotx.HeufyBot;
/**
 * This event is dispatched when we receive a user list from the server
 * after joining a channel.
 * <p>
 * Shortly after joining a channel, the IRC server sends a list of all
 * users in that channel. The PircBotX collects this information and
 * dispatched this event as soon as it has the full list.
 * <p>
 * To obtain the nick of each user in the channel, call the {@link User#getNick()}
 * method on each User object in the {@link Set}.
 * <p>
 * At a later time, you may call {@link HeufyBot#getUsers(org.pircbotx.Channel) }
 * to obtain an up to date list of the users in the channel.
 * @author Leon Blakey <lord.quackstar at gmail.com>
 * @see User
 */

public class UserListEvent<T extends HeufyBot> extends Event<T> {
	protected final Channel channel;
	protected final Set<User> users;
	/**
	 * Default constructor to setup object. Timestamp is automatically set
	 * to current time as reported by {@link System#currentTimeMillis() }
	 * @param channel The channel that the user list is from.
	 * @param users An <b>immutable</b> Set of Users belonging to this channel.
	 */
	public UserListEvent(T bot, Channel channel, Set<User> users) {
		super(bot);
		this.channel = channel;
		this.users = users;
	}
	/**
	 * Respond with a message to the channel that the userlist was from
	 * @param response The response to send
	 */
	@Override
	public void respond(String response) {
		getBot().sendMessage(getChannel(), response);
	}
	
	@java.lang.SuppressWarnings("all")
	public Channel getChannel() {
		return this.channel;
	}
	
	@java.lang.SuppressWarnings("all")
	public Set<User> getUsers() {
		return this.users;
	}
	
	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	public java.lang.String toString() {
		return "UserListEvent(channel=" + this.getChannel() + ", users=" + this.getUsers() + ")";
	}
	
	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	public boolean equals(final java.lang.Object o) {
		if (o == this) return true;
		if (!(o instanceof UserListEvent)) return false;
		final UserListEvent<?> other = (UserListEvent<?>)o;
		if (!other.canEqual((java.lang.Object)this)) return false;
		if (!super.equals(o)) return false;
		final java.lang.Object this$channel = this.getChannel();
		final java.lang.Object other$channel = other.getChannel();
		if (this$channel == null ? other$channel != null : !this$channel.equals(other$channel)) return false;
		final java.lang.Object this$users = this.getUsers();
		final java.lang.Object other$users = other.getUsers();
		if (this$users == null ? other$users != null : !this$users.equals(other$users)) return false;
		return true;
	}
	
	@java.lang.SuppressWarnings("all")
	public boolean canEqual(final java.lang.Object other) {
		return other instanceof UserListEvent;
	}
	
	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	public int hashCode() {
		final int PRIME = 31;
		int result = 1;
		result = result * PRIME + super.hashCode();
		final java.lang.Object $channel = this.getChannel();
		result = result * PRIME + ($channel == null ? 0 : $channel.hashCode());
		final java.lang.Object $users = this.getUsers();
		result = result * PRIME + ($users == null ? 0 : $users.hashCode());
		return result;
	}
}