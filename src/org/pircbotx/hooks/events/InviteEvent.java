// Generated by delombok at Thu Oct 04 13:11:43 CEST 2012
/**
 * Copyright (C) 2010-2011 Leon Blakey <lord.quackstar at gmail.com>
 *
 * This file is part of PircBotX.
 *
 * PircBotX is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PircBotX is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PircBotX.  If not, see <http://www.gnu.org/licenses/>.
 */
package org.pircbotx.hooks.events;

import org.pircbotx.hooks.Event;
import org.pircbotx.HeufyBot;
/**
 * Called when we are invited to a channel by a user.
 * @author Leon Blakey <lord.quackstar at gmail.com>
 */

public class InviteEvent<T extends HeufyBot> extends Event<T> {
	protected final String user;
	protected final String channel;
	/**
	 * Default constructor to setup object. Timestamp is automatically set
	 * to current time as reported by {@link System#currentTimeMillis() }
	 * @param user The user that sent the invitation. Provided as a string since
	 *             the user may or may not be in a channel were in
	 * @param channel The channel that we're being invited to. Provided as a string
	 *                since we are not joined to the channel yet
	 */
	public InviteEvent(T bot, String user, String channel) {
		super(bot);
		this.user = user;
		this.channel = channel;
	}
	/**
	 * Respond with a private message to the user who sent the invite
	 * @param response The response to send 
	 */
	@Override
	public void respond(String response) {
		getBot().sendMessage(getUser(), response);
	}
	
	@java.lang.SuppressWarnings("all")
	public String getUser() {
		return this.user;
	}
	
	@java.lang.SuppressWarnings("all")
	public String getChannel() {
		return this.channel;
	}
	
	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	public java.lang.String toString() {
		return "InviteEvent(user=" + this.getUser() + ", channel=" + this.getChannel() + ")";
	}
	
	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	public boolean equals(final java.lang.Object o) {
		if (o == this) return true;
		if (!(o instanceof InviteEvent)) return false;
		final InviteEvent<?> other = (InviteEvent<?>)o;
		if (!other.canEqual((java.lang.Object)this)) return false;
		if (!super.equals(o)) return false;
		if (this.getUser() == null ? other.getUser() != null : !this.getUser().equals((java.lang.Object)other.getUser())) return false;
		if (this.getChannel() == null ? other.getChannel() != null : !this.getChannel().equals((java.lang.Object)other.getChannel())) return false;
		return true;
	}
	
	@java.lang.SuppressWarnings("all")
	public boolean canEqual(final java.lang.Object other) {
		return other instanceof InviteEvent;
	}
	
	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	public int hashCode() {
		final int PRIME = 31;
		int result = 1;
		result = result * PRIME + super.hashCode();
		result = result * PRIME + (this.getUser() == null ? 0 : this.getUser().hashCode());
		result = result * PRIME + (this.getChannel() == null ? 0 : this.getChannel().hashCode());
		return result;
	}
}