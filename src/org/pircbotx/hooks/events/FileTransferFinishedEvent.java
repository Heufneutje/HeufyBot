// Generated by delombok at Thu Oct 04 13:11:43 CEST 2012
/**
 * Copyright (C) 2010-2011 Leon Blakey <lord.quackstar at gmail.com>
 *
 * This file is part of PircBotX.
 *
 * PircBotX is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PircBotX is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PircBotX.  If not, see <http://www.gnu.org/licenses/>.
 */
package org.pircbotx.hooks.events;

import org.pircbotx.DccFileTransfer;
import org.pircbotx.hooks.Event;
import org.pircbotx.HeufyBot;
import org.pircbotx.hooks.types.GenericDCCEvent;
/**
 * This event gets dispatched when a DccFileTransfer has finished.
 * If there was a problem, the Exception will say what went wrong.
 * If the file was sent successfully, the Exception will be null.
 *  <p>
 * Both incoming and outgoing file transfers are passed to this event.
 * You can determine the type by calling the isIncoming or isOutgoing
 * methods on the DccFileTransfer object.
 * @author Leon Blakey <lord.quackstar at gmail.com>
 * @see DccFileTransfer
 */

public class FileTransferFinishedEvent<T extends HeufyBot> extends Event<T> implements GenericDCCEvent<T> {
	protected final DccFileTransfer transfer;
	protected final Exception exception;
	/**
	 * Default constructor to setup object. Timestamp is automatically set
	 * to current time as reported by {@link System#currentTimeMillis() }
	 * @param transfer The DccFileTransfer that has finished.
	 * @param e null if the file was transfered successfully, otherwise this
	 *          will report what went wrong.
	 */
	public FileTransferFinishedEvent(T bot, DccFileTransfer transfer, Exception e) {
		super(bot);
		this.transfer = transfer;
		this.exception = e;
	}
	/**
	 * Respond by sending a private message to the user that started the file transfer.
	 * @param response The response to send 
	 */
	@Override
	public void respond(String response) {
		getBot().sendMessage(getTransfer().getUser(), response);
	}
	
	@java.lang.SuppressWarnings("all")
	public DccFileTransfer getTransfer() {
		return this.transfer;
	}
	
	@java.lang.SuppressWarnings("all")
	public Exception getException() {
		return this.exception;
	}
	
	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	public java.lang.String toString() {
		return "FileTransferFinishedEvent(transfer=" + this.getTransfer() + ", exception=" + this.getException() + ")";
	}
	
	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	public boolean equals(final java.lang.Object o) {
		if (o == this) return true;
		if (!(o instanceof FileTransferFinishedEvent)) return false;
		final FileTransferFinishedEvent<?> other = (FileTransferFinishedEvent<?>)o;
		if (!other.canEqual((java.lang.Object)this)) return false;
		if (!super.equals(o)) return false;
		if (this.getTransfer() == null ? other.getTransfer() != null : !this.getTransfer().equals((java.lang.Object)other.getTransfer())) return false;
		if (this.getException() == null ? other.getException() != null : !this.getException().equals((java.lang.Object)other.getException())) return false;
		return true;
	}
	
	@java.lang.SuppressWarnings("all")
	public boolean canEqual(final java.lang.Object other) {
		return other instanceof FileTransferFinishedEvent;
	}
	
	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	public int hashCode() {
		final int PRIME = 31;
		int result = 1;
		result = result * PRIME + super.hashCode();
		result = result * PRIME + (this.getTransfer() == null ? 0 : this.getTransfer().hashCode());
		result = result * PRIME + (this.getException() == null ? 0 : this.getException().hashCode());
		return result;
	}
}