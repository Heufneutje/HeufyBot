// Generated by delombok at Fri May 17 11:49:19 CEST 2013
/**
 * Copyright (C) 2010-2013 Leon Blakey <lord.quackstar at gmail.com>
 *
 * This file is part of PircBotX.
 *
 * PircBotX is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PircBotX is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PircBotX. If not, see <http://www.gnu.org/licenses/>.
 */
package org.pircbotx.hooks.events;

import org.pircbotx.HeufyBot;
import org.pircbotx.hooks.Event;
/**
 * Dispatched when a reconnect happens
 * @author Leon Blakey <lord.quackstar at gmail.com>
 */

public class ReconnectEvent<T extends HeufyBot> extends Event<T> {
	protected boolean success;
	protected Exception ex;
	/**
	 * Default constructor to setup object. Timestamp is automatically set
	 * to current time as reported by {@link System#currentTimeMillis() }
	 */
	public ReconnectEvent(T bot, boolean success, Exception ex) {
		super(bot);
		this.success = success;
		this.ex = ex;
	}
	/**
	 * Does NOT respond to the server! This will throw an {@link UnsupportedOperationException}
	 * since we can't respond to a server we might not be connected to yet.
	 * @param response The response to send
	 */
	@Override
	public void respond(String response) {
		throw new UnsupportedOperationException("Attepting to respond to a reconnected server");
	}
	
	@java.lang.SuppressWarnings("all")
	public boolean isSuccess() {
		return this.success;
	}
	
	@java.lang.SuppressWarnings("all")
	public Exception getEx() {
		return this.ex;
	}
	
	@java.lang.SuppressWarnings("all")
	public void setSuccess(final boolean success) {
		this.success = success;
	}
	
	@java.lang.SuppressWarnings("all")
	public void setEx(final Exception ex) {
		this.ex = ex;
	}
	
	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	public java.lang.String toString() {
		return "ReconnectEvent(success=" + this.isSuccess() + ", ex=" + this.getEx() + ")";
	}
	
	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	public boolean equals(final java.lang.Object o) {
		if (o == this) return true;
		if (!(o instanceof ReconnectEvent)) return false;
		final ReconnectEvent<?> other = (ReconnectEvent<?>)o;
		if (!other.canEqual((java.lang.Object)this)) return false;
		if (!super.equals(o)) return false;
		if (this.isSuccess() != other.isSuccess()) return false;
		final java.lang.Object this$ex = this.getEx();
		final java.lang.Object other$ex = other.getEx();
		if (this$ex == null ? other$ex != null : !this$ex.equals(other$ex)) return false;
		return true;
	}
	
	@java.lang.SuppressWarnings("all")
	public boolean canEqual(final java.lang.Object other) {
		return other instanceof ReconnectEvent;
	}
	
	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	public int hashCode() {
		final int PRIME = 31;
		int result = 1;
		result = result * PRIME + super.hashCode();
		result = result * PRIME + (this.isSuccess() ? 1231 : 1237);
		final java.lang.Object $ex = this.getEx();
		result = result * PRIME + ($ex == null ? 0 : $ex.hashCode());
		return result;
	}
}